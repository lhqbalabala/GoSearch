// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: Related_Search.proto

package models

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RelatedSearch service

func NewRelatedSearchEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RelatedSearch service

type RelatedSearchService interface {
	GetRelatedSearch(ctx context.Context, in *RelatedSearchRequest, opts ...client.CallOption) (*RelatedSearchResponse, error)
}

type relatedSearchService struct {
	c    client.Client
	name string
}

func NewRelatedSearchService(name string, c client.Client) RelatedSearchService {
	return &relatedSearchService{
		c:    c,
		name: name,
	}
}

func (c *relatedSearchService) GetRelatedSearch(ctx context.Context, in *RelatedSearchRequest, opts ...client.CallOption) (*RelatedSearchResponse, error) {
	req := c.c.NewRequest(c.name, "RelatedSearch.GetRelatedSearch", in)
	out := new(RelatedSearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RelatedSearch service

type RelatedSearchHandler interface {
	GetRelatedSearch(context.Context, *RelatedSearchRequest, *RelatedSearchResponse) error
}

func RegisterRelatedSearchHandler(s server.Server, hdlr RelatedSearchHandler, opts ...server.HandlerOption) error {
	type relatedSearch interface {
		GetRelatedSearch(ctx context.Context, in *RelatedSearchRequest, out *RelatedSearchResponse) error
	}
	type RelatedSearch struct {
		relatedSearch
	}
	h := &relatedSearchHandler{hdlr}
	return s.Handle(s.NewHandler(&RelatedSearch{h}, opts...))
}

type relatedSearchHandler struct {
	RelatedSearchHandler
}

func (h *relatedSearchHandler) GetRelatedSearch(ctx context.Context, in *RelatedSearchRequest, out *RelatedSearchResponse) error {
	return h.RelatedSearchHandler.GetRelatedSearch(ctx, in, out)
}
