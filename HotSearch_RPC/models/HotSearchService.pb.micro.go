// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: HotSearchService.proto

package models

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for HotSearch service

func NewHotSearchEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for HotSearch service

type HotSearchService interface {
	GetHotSearchList(ctx context.Context, in *HotSearchRequest, opts ...client.CallOption) (*HotSearchListResponse, error)
	InsertQuery(ctx context.Context, in *InsertQueryRequest, opts ...client.CallOption) (*InsertQueryRespense, error)
}

type hotSearchService struct {
	c    client.Client
	name string
}

func NewHotSearchService(name string, c client.Client) HotSearchService {
	return &hotSearchService{
		c:    c,
		name: name,
	}
}

func (c *hotSearchService) GetHotSearchList(ctx context.Context, in *HotSearchRequest, opts ...client.CallOption) (*HotSearchListResponse, error) {
	req := c.c.NewRequest(c.name, "HotSearch.GetHotSearchList", in)
	out := new(HotSearchListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotSearchService) InsertQuery(ctx context.Context, in *InsertQueryRequest, opts ...client.CallOption) (*InsertQueryRespense, error) {
	req := c.c.NewRequest(c.name, "HotSearch.InsertQuery", in)
	out := new(InsertQueryRespense)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HotSearch service

type HotSearchHandler interface {
	GetHotSearchList(context.Context, *HotSearchRequest, *HotSearchListResponse) error
	InsertQuery(context.Context, *InsertQueryRequest, *InsertQueryRespense) error
}

func RegisterHotSearchHandler(s server.Server, hdlr HotSearchHandler, opts ...server.HandlerOption) error {
	type hotSearch interface {
		GetHotSearchList(ctx context.Context, in *HotSearchRequest, out *HotSearchListResponse) error
		InsertQuery(ctx context.Context, in *InsertQueryRequest, out *InsertQueryRespense) error
	}
	type HotSearch struct {
		hotSearch
	}
	h := &hotSearchHandler{hdlr}
	return s.Handle(s.NewHandler(&HotSearch{h}, opts...))
}

type hotSearchHandler struct {
	HotSearchHandler
}

func (h *hotSearchHandler) GetHotSearchList(ctx context.Context, in *HotSearchRequest, out *HotSearchListResponse) error {
	return h.HotSearchHandler.GetHotSearchList(ctx, in, out)
}

func (h *hotSearchHandler) InsertQuery(ctx context.Context, in *InsertQueryRequest, out *InsertQueryRespense) error {
	return h.HotSearchHandler.InsertQuery(ctx, in, out)
}
